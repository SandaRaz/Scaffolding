[Save]
public int Save(NpgsqlConnection cnx) {
    int affectedRow = 0;

    string sql = "INSERT INTO $classVariable$ ([[$field$]]) VALUES([[@$field$]])";

    this.$classPK$ = Connex.createId(cnx, "$classVariable$_sequence", "$classPrefixe$", 7);
    using(NpgsqlCommand command = new NpgsqlCommand(sql, cnx))
    {
        Console.WriteLine("New $classPK$: " + this.$classPK$);
        [command.Parameters.AddWithValue("@$field$", this.$field$);]

        affectedRow += command.ExecuteNonQuery();
    }

    return affectedRow;
}

[FindById]
public $className$? FindById(NpgsqlConnection cnx, Object id) {
    $className$? $classVariable$ = null;

    string sql = "SELECT * FROM $classVariable$ WHERE id = @id";

    using(NpgsqlCommand command = new NpgsqlCommand(sql,cnx)){
        command.Parameters.AddWithValue("@id", id);

        using(NpgsqlDataReader reader = command.ExecuteReader()){
            if(reader.HasRows){
                while(reader.Read()){
                    [$fieldType$ $field$DB = reader.Get$DaoGetter$($fieldNumStart0$);]

                    $classVariable$ = new $className$();
                    [$classVariable$.$field$ = $field$DB;]
                }
            }
        }
    }

    return $classVariable$;
}

[FindAll]
public List<$className$> FindAll(NpgsqlConnection cnx) {
    List<$className$> $classVariable$List = new List<$className$>();

    string sql = "SELECT * FROM $classVariable$";

    using(NpgsqlCommand command = new NpgsqlCommand(sql,cnx)){
        using(NpgsqlDataReader reader = command.ExecuteReader()){
            if(reader.HasRows){
                $className$? $classVariable$Temp = null;
                while(reader.Read()){
                    [$fieldType$ $field$DB = reader.Get$DaoGetter$($fieldNumStart0$);]

                    $classVariable$Temp = new $className$();
                    [$classVariable$Temp.$field$ = $field$DB;]

                    $classVariable$List.Add($classVariable$Temp);
                }
            }
        }
    }

    return $classVariable$List;
}

[FindAllPg]
public List<$className$> FindAllPg(NpgsqlConnection cnx, Object debut) {
    List<$className$> $classVariable$List = new List<$className$>();

    string sql = "SELECT * FROM $classVariable$ OFFSET @debut LIMIT 5";

    using(NpgsqlCommand command = new NpgsqlCommand(sql,cnx)){
        command.Parameters.AddWithValue("@debut", debut);

        using(NpgsqlDataReader reader = command.ExecuteReader()){
            if(reader.HasRows){
                $className$? $classVariable$Temp = null;
                while(reader.Read()){
                    [$fieldType$ $field$DB = reader.Get$DaoGetter$($fieldNumStart0$);]

                    $classVariable$Temp = new $className$();
                    [$classVariable$Temp.$field$ = $field$DB;]

                    $classVariable$List.Add($classVariable$Temp);
                }
            }
        }
    }

    return $classVariable$List;
}

[Update]
public int Update(NpgsqlConnection cnx, Object id) {
    int updatedRow = 0;

    string sql = "UPDATE $classVariable$ SET [[$updateField$=@$updateField$]] WHERE id = @id";

    using(NpgsqlCommand command = new NpgsqlCommand(sql, cnx))
    {
        [command.Parameters.AddWithValue("@$updateField$", this.$updateField$);]
        command.Parameters.AddWithValue("@id", id);

        updatedRow += command.ExecuteNonQuery();
    }

    return updatedRow;
}

[Delete]
public int Delete(NpgsqlConnection cnx, Object id) {
    int deletedRow = 0;

    string sql = "DELETE FROM $classVariable$ WHERE id = @id";

    using(NpgsqlCommand command = new NpgsqlCommand(sql, cnx))
    {
        command.Parameters.AddWithValue("@id", id);

        deletedRow += command.ExecuteNonQuery();
    }

    return deletedRow;
}

[Login]
public $className$? Authentificate(NpgsqlConnection cnx, Object usermail,Object key) {
    $className$? $classVariable$ = null;

    string sql = "SELECT * FROM $classVariable$ WHERE $usermail$ = @$usermail$ AND $key$ = @$key$";

    using(NpgsqlCommand command = new NpgsqlCommand(sql,cnx)){
        command.Parameters.AddWithValue("@$usermail$", usermail);
        command.Parameters.AddWithValue("@$key$", key);

        using(NpgsqlDataReader reader = command.ExecuteReader()){
            if(reader.HasRows){
                while(reader.Read()){
                    [$fieldType$ $field$DB = reader.Get$DaoGetter$($fieldNumStart0$);]

                    $classVariable$ = new $className$();
                    [$classVariable$.$field$ = $field$DB;]
                }
            }
        }
    }

    return $classVariable$;
}